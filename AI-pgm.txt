2)

tree ={
1: [2,9,10],
2: [3,4],
3: [],
4: [5,6,7],
5: [8],
6: [],
7: [],
8: [],
9: [],
10: []
}
def breadth_first_search(tree,start):
 q=[start]
 visited=[]
 
 while q:
     print("before",q)
     node=q.pop(0)
     visited.append(node)
 for child in (tree[node]):
     if child not in visited and child not in q:
         q.append(child)
     print("after",q)
 return visited
result=breadth_first_search(tree,1)
print(result)
-------------------------------------------------------------------------------
4)

print ("Enter the number of queens")
N = int(input())
# here we create a chessboard
# NxN matrix with all elements set to 0
board = [[0]*N for _ in range(N)]
def attack(i, j):
 #checking vertically and horizontally
 for k in range(0,N):
 if board[i][k]==1 or board[k][j]==1:
 return True
 #checking diagonally
 for k in range(0,N):
 for l in range(0,N):
 if (k+l==i+j) or (k-l==i-j):
 if board[k][l]==1:
 return True
 return False
def N_queens(n):
 if n==0:
 return True
 for i in range(0,N):
 for j in range(0,N):
 if (not(attack(i,j))) and (board[i][j]!=1):
 board[i][j] = 1
 if N_queens(n-1)==True:
 return True
 board[i][j] = 0
 return False
N_queens(N)
for i in board:
 print (i)
-------------------------------------------------------------------------------
5)

from itertools import permutations
def calculate_total_distance(tour, distances):
 total_distance = 0
 for i in range(len(tour) - 1):
    total_distance += distances[tour[i]][tour[i + 1]]
 total_distance += distances[tour[-1]][tour[0]] # Return to the startin
g city
 return total_distance
 
def traveling_salesman_bruteforce(distances):
    cities = range(len(distances))
    min_distance = float('inf')
    optimal_tour = None
 for tour in permutations(cities):
     distance = calculate_total_distance(tour, distances)
     if distance < min_distance:
        min_distance = distance
        optimal_tour = tour
 return optimal_tour, min_distance
distances_matrix = [
 [0, 10, 15, 20],
 [10, 0, 35, 25],
 [15, 35, 0, 30],
 [20, 25, 30, 0]
]
optimal_tour, min_distance = traveling_salesman_bruteforce(distances_matri
x)
print("Optimal Tour:", optimal_tour)
print("Minimum Distance:", min_distance)
-------------------------------------------------------------------------------
8)

board = [" " for x in range(9)]
def print_board():
 row1 = "| {} | {} | {} |".format(board[0], board[1], board[2])
 row2 = "| {} | {} | {} |".format(board[3], board[4], board[5])
 row3 = "| {} | {} | {} |".format(board[6], board[7], board[8])
 print()
 print(row1)
 print(row2)
 print(row3)
 print()
def player_move(icon):
 if icon == "X":
 	number = 1
 elif icon == "O":
 	number = 2
 print("Your turn player {}".format(number))
 choice = int(input("Enter your move (1-9): ").strip())
 if board[choice - 1] == " ":
   board[choice - 1] = icon
 else:
    print()
    print("That space is taken!")
def is_victory(icon):
     if (board[0] == icon and board[1] == icon and board[2] == icon) or \
        (board[3] == icon and board[4] == icon and board[5] == icon) or \
        (board[6] == icon and board[7] == icon and board[8] == icon) or \
        (board[0] == icon and board[3] == icon and board[6] == icon) or \
        (board[1] == icon and board[4] == icon and board[7] == icon) or \
        (board[2] == icon and board[5] == icon and board[8] == icon) or \
        (board[0] == icon and board[4] == icon and board[8] == icon) or \
        (board[2] == icon and board[4] == icon and board[6] == icon):
         return True
     else:
      return False
def is_draw():
 if " " not in board:
    return True
 else:
    return False
while True:
 print_board()
 player_move("X")
 print_board()
 if is_victory("X"):
    print("X wins! Congratulations!")
    break
 elif is_draw():
    print("It's a draw!")
    break
 player_move("O")
 if is_victory("O"):
     print_board()
     print("O wins! Congratulations!")
     break
 elif is_draw():
     print("It's a draw!")
     break
-----------------------------------------------------------------------------
6)

 global facts
global rules
rules = True
facts =[["plant","mango"],["eating","mango"], ["seed","sprouts"]]
def assert_fact(fact):
 global facts 
 global rules
 if not fact in facts:
 facts+=[fact]
 rules=True
while rules:
 rules=False
 for A1 in facts:
 if A1[0]=="seed":
 assert_fact(["plant",A1[1]])
 if A1[0]=="plant":
 assert_fact(["fruit",A1[1]])
 if A1[0]=="plant" and ["eating",A1[1]] in facts:
 assert_fact(["human",A1[1]])
print(facts)
=============================================================================
1)
 
def water_jug_dfs(capacity_x, capacity_y, target):
 stack = [(0, 0, [])] 
 visited_states = set()
 
 while stack:
  x, y, path = stack.pop()
  if (x, y) in visited_states:
     continue
  visited_states.add((x, y))
 if x == target or y == target:
     return path + [(x, y)]
 operations = [
    ("fill_x", capacity_x, y),
 ("fill_y", x, capacity_y),
 ("empty_x", 0, y),
 ("empt y_y", x, 0),
 ("pour_x_to_y", max(0, x - (capacity_y - y)), min(capacity_y, y
+ x)),
 ("pour_y_to_x", min(capacity_x, x + y), max(0, y - (capacity_x
- x))),
 ]
 for operation, new_x, new_y in operations:
   if 0 <= new_x <= capacity_x and 0 <= new_y <= capacity_y:
       stack.append((new_x, new_y, path + [(x, y, operation)]))
 return None
capacity_x = 4
capacity_y = 3
target = 2
solution_path = water_jug_dfs(capacity_x, capacity_y, target)
if solution_path:
    print("Solution found:")
    for state in solution_path:
         print(f"({state[0]}, {state[1]})")
else:
      print("No solution found.")

-------------------------------------------------------------------------------
7)

from sympy import symbols, Not, Or, simplify
def resolve(clause1, clause2):
 resolvent = [
 for literal1 in clause1:
   for literal2 in clause2:
     if literal1 == Not(literal2) or literal2 == Not(literal1):
       resolvent.extend([l for l in (clause1 + clause2) if l != literal1 and l != literal2])
 return list(set(resolvent))
def resolution(clauses):
 new_clauses = list(clauses)
 while True:
   n = len(new_clauses)
   print(new_clauses)
   print("-------------------------------------")
   pairs = [(new_clauses[i], new_clauses[j]) for i in range(n) for j in range(i+1, n)]
 
 for (clause1, clause2) in pairs:
   print(clause1)
   print(clause2)
   resolvent = resolve(clause1, clause2)
   print(resolvent)
   print("---------------")
   if not resolvent:
      return True
 
   if resolvent not in new_clauses:
      new_clauses.append(resolvent)
 
 if n == len(new_clauses):
   return False
if __name__ == "__main__":
 clause1 = [symbols('P'), Not(symbols('Q'))]
 clause2 = [Not(symbols('P')), symbols('Q')]
 clause3 = [Not(symbols('P')), Not(symbols('Q'))]
 clauses = [clause1, clause2, clause3]
 result = resolution(clauses)
 if result:
    print("The set of clauses is unsatisfiable (contradiction found).")
 else:
    print("The set of clauses is satisfiable.")